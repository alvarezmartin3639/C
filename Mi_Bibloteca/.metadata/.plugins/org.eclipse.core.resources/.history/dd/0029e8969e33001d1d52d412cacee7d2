/*
 * utnArray.c
 *
 *  Created on: 12 sept 2022
 *      Author: kenyn
 */

#include "utnArray.h"
#include <stdio.h>
#include <string.h>

int incializarArrayInt(int enteros[], int tamEnteros, int valor) {

	int retorno = -1;

	if (enteros != NULL && tamEnteros > 0) {

		for (int i = 0; i < tamEnteros; i++)
			enteros[i] = valor;

		retorno = 0;
	}

	return retorno;

}

int incializarArrayFloat(float flotantes[], int tamFlotantes, float valor) {

	int retorno = -1;

	if (flotantes != NULL && tamFlotantes > 0) {

		for (int i = 0; i < tamFlotantes; i++)
			flotantes[i] = valor;

		retorno = 0;
	}

	return retorno;

}

int incializarArrayChar(char caracteres[], int tamString, char valor) {

	int retorno = -1;

	if (caracteres != NULL && tamString > 0) {

		for (int i = 0; i < tamString; i++)
			caracteres[i] = valor;

		retorno = 0;
	}

	return retorno;

}

int incializarArrayString(int tamString, int tamMatriz,
		char string[][tamString], char valor[]) {

	int retorno = -1;

	if (string != NULL && tamString > 0 && tamMatriz > 0) {

		for (int i = 0; i < tamMatriz; i++)
			strcpy(string[i], valor);

		retorno = 0;
	}

	return retorno;

}

int ordenarEnterosDescendiente(int numeros[], int tamNumeros) {
	int retorno = -1;
	int aux;

	if (numeros != NULL && tamNumeros > 0) {
		for (int i = 0; i < tamNumeros - 1; i++) {
			for (int j = i + 1; j < tamNumeros; j++) {
				if (numeros[i] < numeros[j]) {
					aux = numeros[i];
					numeros[i] = numeros[j];
					numeros[j] = aux;
				}
			}
		}

		retorno = 1;
	}

	return retorno;
}

int ordenarEnterosDescendiente(int numeros[], int tamNumeros) {
	int retorno = -1;
	int aux;

	if (numeros != NULL && tamNumeros > 0) {
		for (int i = 0; i < tamNumeros - 1; i++) {
			for (int j = i + 1; j < tamNumeros; j++) {
				if (numeros[i] < numeros[j]) {
					aux = numeros[i];
					numeros[i] = numeros[j];
					numeros[j] = aux;
				}
			}
		}

		retorno = 1;
	}

	return retorno;
}

int ordenarEnterosAscendiente(int numeros[], int tamNumeros) {
	int retorno = -1;
	int aux;

	if (numeros != NULL && tamNumeros > 0) {
		for (int i = 0; i < tamNumeros - 1; i++) {
			for (int j = i + 1; j < tamNumeros; j++) {
				if (numeros[i] > numeros[j]) {
					aux = numeros[i];
					numeros[i] = numeros[j];
					numeros[j] = aux;
				}
			}
		}

		retorno = 1;
	}

	return retorno;
}

int ordenarFlotantesDescendiente(float numeros[], int tamNumeros) {
	int retorno = -1;
	float aux;

	if (numeros != NULL && tamNumeros > 0) {
		for (int i = 0; i < tamNumeros - 1; i++) {
			for (int j = i + 1; j < tamNumeros; j++) {
				if (numeros[i] < numeros[j]) {
					aux = numeros[i];
					numeros[i] = numeros[j];
					numeros[j] = aux;
				}
			}
		}

		retorno = 1;
	}

	return retorno;
}

int ordenarFlotantesAscendiente(float numeros[], int tamNumeros) {
	int retorno = -1;
	float aux;

	if (numeros != NULL && tamNumeros > 0) {
		for (int i = 0; i < tamNumeros - 1; i++) {
			for (int j = i + 1; j < tamNumeros; j++) {
				if (numeros[i] > numeros[j]) {
					aux = numeros[i];
					numeros[i] = numeros[j];
					numeros[j] = aux;
				}
			}
		}

		retorno = 1;
	}

	return retorno;
}
