/*
 ============================================================================
 Name        : 2_Menu_Con_Relacion.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "sector.h"
#include "utnGUI.h"
#include "Empleado.h"
#include "utnValidacion.h"
#include "utnArray.h"

int main(void) {

	/**
	 *
	 *El ejercicio está completo pero con algunas cosas que cambiar
	 *
	 *
	 *Cosas para revisar:
	 *
	 * Manejar siemrpe con la descricpion de sectores, nunca con el id ,siempre elegir la descripcion
	 * Revisar si el esSectorValido en el alta , mod anda bien.
	 * Pensar si es mejor manejarse con el indice o el id al por ejemplo retonar y  usar la función esSectorValido
	 * crear un define idMin y remplazarlo en las valdiaciones o en otros lados ( por si no empieza el id en 1)
	 * dejar de hacer case sensitive a los textos y la verificación , sino darle un formato fijo o no darle formato.
	 * hacer la tabla al mostrar empleados y sectores
	 *
	 */

	setbuf(stdout, NULL);
	eEmpleado empleados[TAMEMPLEADOS] = { { 1, 1, "AMartin", "alvarez", 23.2, 0 }, { 2, 1, "ZRoberto", "Lopez", 24.2, 0 }, { 3, 1,
			"Federico", "Gonzales", 22.2, 0 }, { 4, 3, "Juan", "Oreyana", 20.2, 0 }, { 5, 2, "Fran", "Pedrosa", 22.2, 0 }, { 6, 2, "Julia",
			"Freijo", 22.2, 0 }

	};
	eSector sectores[TAMSECTOR] = { { 1, "Sistemas" }, { 2, "RecursosHumanos" }, { 3, "Gerencia" }, };
	int contId = 0;
	int contEmpleadosActivos = 1;
	int contEmpleadosSalarioMayorQuePromedio = 0;
	float acumSalarios = 0;
	int opcion;

	do {

		limpiarPantalla();
		getPedirInt(&opcion, "\n1. ALTAS \n2. MODIFICAR \n3. BAJA \n4 INFORMAR \n5. SALIR \n\nIngrese una opción: ",
				"\n***Error, no elegió una opción valida***", 1, 5, 4);

		switch (opcion) {

		case 1:
			altaEmpleados(empleados, sectores, TAMSECTOR, TAMEMPLEADOS, &contId, &contEmpleadosActivos);
			break;

		case 2:
			modificarEmpleados(empleados, sectores, TAMSECTOR, TAMEMPLEADOS, contEmpleadosActivos);
			break;

		case 3:
			eliminarEmpleados(empleados, sectores, TAMSECTOR, TAMEMPLEADOS, &contEmpleadosActivos);
			break;

		case 4: {

			do {

				getPedirInt(&opcion,
						"\n1. Listar empleados ordenados alfabéticamente por Apellido y Sector. \n2. Total, promedio y contador de empleados que superan los salarios promedio  \n3. Atras \n\nIngrese una opción: ",
						"\n***Error, no elegió una opción valida***", 1, 3, 4);

				switch (opcion) {

				case 1:

					ordenarEmpleadoPorNombreYSector(empleados, TAMEMPLEADOS);
					mostrarEmpleados(empleados, sectores, TAMEMPLEADOS, TAMSECTOR, 0, 1, contEmpleadosActivos);

					break;

				case 2:

					for (int i = 0; i < TAMEMPLEADOS; i++)
						if (empleados[i].isEmpity == 0)
							acumSalarios += empleados[i].salary;

					for (int i = 0; i < TAMEMPLEADOS; i++)
						if (empleados[i].isEmpity == 0 && empleados[i].salary > acumSalarios / contEmpleadosActivos)
							contEmpleadosSalarioMayorQuePromedio++;

					printf("\n\nTotal: %.2f ", acumSalarios);
					printf("\n\nPromedio: %.2f ", acumSalarios / contEmpleadosActivos);
					printf("\n\nCantidad empleados con salario mayor al promedio: %d ", contEmpleadosSalarioMayorQuePromedio);

					break;

				case 3: {

					int indiceDelSectorMax;
					//array paralelo de sectores
					int auxSectores[TAMSECTOR];

					for (int i = 0; i < TAMSECTOR; i++)
						auxSectores[i] = 0;

					for (int i = 0; i < TAMEMPLEADOS; i++)
						if (empleados[i].isEmpity == 0)
							auxSectores[empleados[i].idSector - 1]++;

					indiceDelSectorMax = buscarIndiceMaximoArrayInt(auxSectores,
					TAMSECTOR);

					printf("\n\nEl sector con mas empleados es %s, con un total de %d empleados ",
							sectores[indiceDelSectorMax].descripcionSector, auxSectores[indiceDelSectorMax]);

					//mostrar sectores con sus empleados
					printf("\n\nListado de sectores junto a sus empleados!");
					for (int i = 0; i < TAMSECTOR; i++) {

						printf("\nEmpleados del sector %s", sectores[i].descripcionSector);

						for (int j = 0; j < TAMEMPLEADOS; j++)
							if (empleados[j].isEmpity == 0)
								if (empleados[j].idSector == sectores[i].idSector)
									mostrarEmpleado(&empleados[j], sectores, TAMSECTOR, 0);

					}

					break;
				}
				}

			} while (opcion != 3);

		}
			break;

		}

	} while (opcion != 5);

	return EXIT_SUCCESS;
}
