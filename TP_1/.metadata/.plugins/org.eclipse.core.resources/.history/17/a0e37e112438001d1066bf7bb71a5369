/*
 * utnMenu.c
 *
 *  Created on: 18 sept 2022
 *      Author: kenyn
 */
#include <stdlib.h>
#include <stdio.h>
#include "utnMenu.h"
#include "utnValidacion.h"
#include "utnArray.h"
#include "utnGUI.h"

int mostrarMenuPrincipal(float *costoHospedaje, float *costoComida,
		float *costoTransporte, int *posicion, int tamJugadores) {

	int retorno = -1;
	if (costoHospedaje != NULL && costoComida != NULL && costoTransporte != NULL
			&& posicion != NULL && tamJugadores > 0) {

		retorno = 0;

		printf("\n               Menu Principal\n");
		printf("\n1. Ingreso de los costos de Mantenimiento");
		mostrarCostos(*costoHospedaje, *costoComida, *costoTransporte);
		printf("\n2.Carga de jugadores");
		mostrarPosicionesYCantidadDeJugadores(posicion, tamJugadores, 0);
		printf("\n3.Realizar todos los cálculos");
		printf("\n4.Informar todos los resultados");
		printf("\n5.Salir");
	}

	return retorno;
}
int inicializacionDeVariables(float *costoHospedaje, float *costoComida,
		float *costoTransporte, int *contJugadoresAFC, int *contJugadoresCAF,
		int *contJugadoresCONCACAF, int *contJugadoresCONMEBOL,
		int *contJugadoresOFC, int *contJugadoresUEFA, int *numeroCamiseta,
		int *posicion, int tamJugadores) {

	*costoHospedaje = 0;
	*costoComida = 0;
	*costoTransporte = 0;
	*contJugadoresAFC = 0;
	*contJugadoresCAF = 0;
	*contJugadoresCONCACAF = 0;
	*contJugadoresCONMEBOL = 0;
	*contJugadoresOFC = 0;
	*contJugadoresUEFA = 0;
	inicializarArrayInt(numeroCamiseta, tamJugadores, 0);
	return inicializarArrayInt(posicion, tamJugadores, 0);

}

int calcularNumeroDePosiciones(int *contArqueros, int *contDefensores,
		int *contMediocampistas, int *contDelanteros, int *posicion,
		int tamJugadores) {

	int retorno = -1;

	if (contArqueros != NULL && contDefensores != NULL
			&& contMediocampistas != NULL && contDelanteros != NULL
			&& posicion != NULL && tamJugadores > 0) {

		for (int i = 0; i < tamJugadores; i++) {

			if (posicion[i] != 0) {

				if (posicion[i] == 1) {
					*contArqueros += 1;

				} else if (posicion[i] == 2) {
					*contDefensores += 1;

				} else if (posicion[i] == 3) {
					*contMediocampistas += 1;

				} else {
					*contDelanteros += 1;
				}

			}
		}

		retorno = 0;
	}

	return retorno;
}

int mostrarPosicionesYCantidadDeJugadores(int *posicion, int tamJugadores,
		int mostrarIndices) {

	int retorno = -1;
	int contArqueros = 0;
	int contDefensores = 0;
	int contMediocampistas = 0;
	int contDelanteros = 0;

	retorno = calcularNumeroDePosiciones(&contArqueros, &contDefensores,
			&contMediocampistas, &contDelanteros, posicion, tamJugadores);

	if (mostrarIndices == 1) {

		printf("\n1. Arqueros -> %d", contArqueros);
		printf("\n2. Defensores -> %d", contDefensores);
		printf("\n3. Mediocampistas -> %d", contMediocampistas);
		printf("\n4. Delanteros -> %d", contDelanteros);

	} else {

		printf("\n Arqueros -> %d", contArqueros);
		printf("\n Defensores -> %d", contDefensores);
		printf("\n Mediocampistas -> %d", contMediocampistas);
		printf("\n Delanteros -> %d", contDelanteros);

	}

	return retorno;
}

int mostrarCostos(float costoHospedaje, float costoComida,
		float costoTransporte) {

	int retorno = -1;

	retorno = 0;

	if (costoHospedaje == 0)
		printf("\n Costo de hospedaje -> $%.0f", costoHospedaje);
	else
		printf("\n Costo de hospedaje -> $%.2f", costoHospedaje);

	if (costoComida == 0)
		printf("\n Costo de comida -> $%.0f", costoComida);
	else
		printf("\n Costo de comida -> $%.2f", costoComida);

	if (costoTransporte == 0)
		printf("\n Costo de transporte -> $%.0f", costoTransporte);
	else
		printf("\n Costo de transporte -> $%.2f", costoTransporte);

	return retorno;
}

int pedirCostos(float *costoHospedaje, float *costoComida, float *costoTransporte) {

	int retorno = -1;

	int opcionElegida;
	float costo;

	if (costoHospedaje != NULL && costoComida != NULL && costoTransporte != NULL) {
		printf("\n               Ingreso de los costos de Mantenimiento.\n");
		mostrarCostos(*costoHospedaje, *costoComida, *costoTransporte);
		printf("\n\n1. Costo de hospedaje");
		printf("\n2. Costo de comida");
		printf("\n3. Costo de transporte");

		if (getPedirInt(&opcionElegida, "\n\nIngrese una opción: ",
				"\n***Error, lo ingresado no es una opción válida, esta debe ser un numero entre 1 y 3",
				1, 3, 4) == 0) {

			if (getPedirFloat(&costo, "\nIngrese el nuevo gasto: ",
					"\n***Error, lo ingresado no es un costo válido, este debe ser un numero entre 1 y 10000000",
					1, 10000000, 4) == 0) {

				switch (opcionElegida) {

				case 1:
					*costoHospedaje += costo;
					break;

				case 2:
					*costoComida += costo;
					break;

				case 3:
					*costoTransporte += costo;
					break;

				}
			}
		}

		retorno = 0;
	}

	return retorno;
}
int pedirPosicion(int *posicion, int tamJugadores, int *auxPosicion) {

	int retorno = -1;

	if (posicion != NULL && tamJugadores > 0) {

		if (getPedirInt(auxPosicion,
				"\nSeleccione la posición correspondiente al jugador: ",
				"\n***Error, lo ingresado no es una opción válida, está debe ser un numero entre 1 y 4\n",
				1, 4, 4) == 0) {

			retorno = 0;

			switch (*auxPosicion) {

			case 1:

				if (contarCantDeNumerosEnArrayInt(posicion, tamJugadores, 1)
						> 1) {

					retorno = 1;
					textoConEspera(
							"\n***Error, se alcanzó los puestos de Arqueros maximos(2), eliga otra posición para el jugador***",
							2000);

				}

				break;

			case 2:

				if (contarCantDeNumerosEnArrayInt(posicion, tamJugadores, 2)
						> 7) {

					retorno = 1;
					textoConEspera(
							"\n***Error, se alcanzó los puestos de Defensores maximos(8), eliga otra posición para el jugador***",
							2000);

				}

				break;

			case 3:

				if (contarCantDeNumerosEnArrayInt(posicion, tamJugadores, 3)
						> 7) {

					retorno = 1;
					textoConEspera(
							"\n***Error, se alcanzó los puestos de Mediocampistas maximos(8), eliga otra posición para el jugador***",
							2000);

				}

				break;

			case 4:

				if (contarCantDeNumerosEnArrayInt(posicion, tamJugadores, 4)
						> 3) {

					retorno = 1;
					textoConEspera(
							"\n***Error, se alcanzó los puestos de Delanteros maximos(4), eliga otra posición para el jugador***",
							2000);

				}

				break;

			}
		}
	}

	return retorno;
}

int pedirConfedereacion(int *contJugadoresAFC, int *contJugadoresCAF,
		int *contJugadoresCONCACAF, int *contJugadoresCONMEBOL,
		int *contJugadoresUEFA, int *contJugadoresOFC) {

	int retorno = -1;
	int auxConfederacion;

	printf("\n               Carga de jugadores\n");
	printf("\n Confederaciónes seleccionables");
	printf("\n1. AFC(Asia)");
	printf("\n2. CAF(África)");
	printf("\n3. CONCACAF(zona del Norte) ");
	printf("\n4. CONMEBOL(Sudamérica)");
	printf("\n5. UEFA(Europa)");
	printf("\n6. OFC(Oceanía)");

	if (getPedirInt(&auxConfederacion,
			"\nSeleccione la Confederación correspondiente al jugador: ",
			"\n***Error, lo ingresado no es una opción válida, está debe ser un numero entre 1 y 6",
			1, 6, 4) == 0) {

		retorno = 0;

		switch (auxConfederacion) {

		case 1:

			*contJugadoresAFC += 1;
			break;

		case 2:
			*contJugadoresCAF += 1;
			break;

		case 3:
			*contJugadoresCONCACAF += 1;
			break;

		case 4:
			*contJugadoresCONMEBOL += 1;
			break;

		case 5:
			*contJugadoresUEFA += 1;
			break;

		case 6:
			*contJugadoresOFC += 1;
			break;

		}
	}

	return retorno;
}
int cargarJugadores(int posicion[], int numeroCamiseta[], int tamJugadores,
		int *contJugadoresAFC, int *contJugadoresCAF,
		int *contJugadoresCONCACAF, int *contJugadoresCONMEBOL,
		int *contJugadoresUEFA, int *contJugadoresOFC) {

	int retorno = -1;
	int indiceDelNuevoJugador;
	int auxPosicion;
	int auxNumeroCamiseta;

	do {

		printf("\n               Carga de jugadores\n");
		printf("\nPosiciones seleccionables");
		mostrarPosicionesYCantidadDeJugadores(posicion, tamJugadores, 1);

		//Busco jugador vacio
		indiceDelNuevoJugador = buscarIntEnArray(posicion, tamJugadores, 0);

		if (pedirPosicion(posicion, tamJugadores, &auxPosicion) == 0) {

			if (getPedirInt(&auxNumeroCamiseta,
					"\nSeleccione el numero de camiseta correspondiente al jugador: ",
					"\n***Error, lo ingresado no es un numero de camiseta  válido, está debe ser un numero entre 1 y 100",
					1, 100, 4) == 0) {

				if (pedirConfedereacion(contJugadoresAFC, contJugadoresCAF,
						contJugadoresCONCACAF, contJugadoresCONMEBOL,
						contJugadoresUEFA, contJugadoresOFC)) {

					posicion[indiceDelNuevoJugador] = auxPosicion;
					numeroCamiseta[indiceDelNuevoJugador] = auxNumeroCamiseta;

				}

			}

		}

	} while (deseaContinuar("\n¿Desea continuar creando jugadores? (si/no)",
			"si", "no") == 1);

	textoConEspera("\nSe lo devolverá al menú principal en 2 segundos...", 2);

	return retorno;
}
